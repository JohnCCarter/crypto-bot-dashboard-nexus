#!/bin/bash

# üöÄ Crypto Trading Bot - Server Start Script
# ===========================================
# Detta skript startar b√•de backend (Flask) och frontend (Vite) korrekt
# K√∂r fr√•n projektets rot: ./start-servers.sh

set -e  # Avsluta vid fel

echo "üîß Crypto Trading Bot - Startar servrar..."
echo "============================================"

# Kontrollera att vi √§r i projektets rot
if [ ! -f "package.json" ] || [ ! -d "backend" ]; then
    echo "‚ùå FEL: K√∂r detta skript fr√•n projektets rot (crypto-bot-dashboard-nexus-1/)"
    echo "üìÅ Nuvarande katalog: $(pwd)"
    exit 1
fi

# Kontrollera om virtuell milj√∂ finns
if [ -d "venv" ]; then
    echo "‚úÖ Anv√§nder virtuell milj√∂ i rotmappen"
    source venv/Scripts/activate
elif [ -d "backend/venv" ]; then
    echo "‚ö†Ô∏è Anv√§nder virtuell milj√∂ i backend-mappen (legacy)"
    echo "‚ö†Ô∏è Rekommendation: Migrera till virtuell milj√∂ i rotmappen enligt docs/guides/environment/VENV_MIGRATION_GUIDE.md"
    source backend/venv/Scripts/activate
else
    echo "‚ùå Ingen virtuell milj√∂ hittades. Skapar en ny i rotmappen..."
    python -m venv venv
    source venv/Scripts/activate
    pip install -r backend/requirements.txt
fi

# Kontrollera Python-version
PYTHON_VERSION=$(python -V 2>&1)
echo "üêç Python-version: $PYTHON_VERSION"
if [[ ! "$PYTHON_VERSION" == *"3.11"* ]]; then
    echo "‚ö†Ô∏è Varning: Rekommenderad Python-version √§r 3.11.9. Du anv√§nder $PYTHON_VERSION"
    echo "üí° Se docs/guides/ENVIRONMENT_SETUP_GUIDE.md f√∂r instruktioner om hur du installerar r√§tt version."
fi

# Kontrollera npm dependencies
if [ ! -d "node_modules" ]; then
    echo "‚ùå FEL: Node.js dependencies saknas"
    echo "üí° K√∂r: npm install"
    exit 1
fi

echo "‚úÖ F√∂rkunskaper kontrollerade"

# Funktion f√∂r att starta Flask
start_flask() {
    echo "üîÑ Startar Flask backend..."
    export FLASK_APP=backend.app
    export FLASK_ENV=development
    
    # Starta Flask fr√•n projektets rot (viktigt f√∂r SQLite-s√∂kv√§gen)
    echo "üìÇ Working directory: $(pwd)"
    echo "üîó Flask app: $FLASK_APP"
    echo "üåê Backend startar p√•: http://localhost:5000"
    echo ""
    
    python -m flask run --host=0.0.0.0 --port=5000
}

# Funktion f√∂r att starta FastAPI
start_fastapi() {
    echo "üîÑ Startar FastAPI backend..."
    cd "$(pwd)" || exit
    python -m backend.fastapi_app
}

# Funktion f√∂r att starta frontend
start_frontend() {
    echo "üîÑ Startar frontend..."
    cd "$(pwd)" || exit
    npm run dev
}

# Starta alla tj√§nster i bakgrunden
start_flask &
FLASK_PID=$!

# V√§nta lite f√∂r att l√•ta Flask starta
sleep 2

start_fastapi &
FASTAPI_PID=$!

# V√§nta lite f√∂r att l√•ta FastAPI starta
sleep 2

start_frontend &
FRONTEND_PID=$!

echo "‚úÖ Alla servrar startade!"
echo "- Backend (Flask): http://localhost:5000"
echo "- Backend (FastAPI): http://localhost:8001"
echo "- Frontend: http://localhost:5173"

# Funktion f√∂r att st√§da upp processer vid avslut
cleanup() {
    echo "üõë Avslutar processer..."
    kill $FLASK_PID $FASTAPI_PID $FRONTEND_PID 2>/dev/null
    exit 0
}

# Registrera cleanup-funktionen f√∂r att k√∂ras vid avslut
trap cleanup SIGINT SIGTERM

# H√•ll skriptet ig√•ng
echo "‚ö†Ô∏è Tryck Ctrl+C f√∂r att avsluta alla processer."
wait