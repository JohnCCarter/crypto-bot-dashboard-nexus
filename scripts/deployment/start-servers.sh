#!/bin/bash

# üöÄ Crypto Trading Bot - Server Start Script
# ===========================================
# Detta skript startar b√•de backend (Flask) och frontend (Vite) korrekt
# K√∂r fr√•n projektets rot: ./start-servers.sh

set -e  # Avsluta vid fel

echo "üîß Crypto Trading Bot - Startar servrar..."
echo "============================================"

# Kontrollera att vi √§r i projektets rot
if [ ! -f "package.json" ] || [ ! -d "backend" ]; then
    echo "‚ùå FEL: K√∂r detta skript fr√•n projektets rot (crypto-bot-dashboard-nexus-1/)"
    echo "üìÅ Nuvarande katalog: $(pwd)"
    exit 1
fi

# Kontrollera Python virtual environment
if [ ! -d "backend/venv" ]; then
    echo "‚ùå FEL: Python virtual environment saknas i backend/venv"
    echo "üí° K√∂r: cd backend && python -m venv venv && source venv/Scripts/activate && pip install -r requirements.txt"
    exit 1
fi

# Kontrollera npm dependencies
if [ ! -d "node_modules" ]; then
    echo "‚ùå FEL: Node.js dependencies saknas"
    echo "üí° K√∂r: npm install"
    exit 1
fi

echo "‚úÖ F√∂rkunskaper kontrollerade"

# Funktion f√∂r att starta backend
start_backend() {
    echo "üêç Startar backend (Flask)..."
    cd "$(dirname "$0")"  # S√§kerst√§ll att vi √§r i projektets rot
    
    # Aktivera virtual environment och starta Flask
    export FLASK_APP=backend/app.py
    export FLASK_ENV=development
    export FLASK_DEBUG=true
    
    echo "üìÇ Working directory: $(pwd)"
    echo "üîó Flask app: $FLASK_APP"
    echo "üåê Backend startar p√•: http://localhost:5000"
    echo ""
    
    # Starta Flask fr√•n projektets rot (viktigt f√∂r SQLite-s√∂kv√§gen)
    source backend/venv/Scripts/activate
    python -m flask run --host=0.0.0.0 --port=5000
}

# Funktion f√∂r att starta frontend
start_frontend() {
    echo "‚öõÔ∏è Startar frontend (Vite)..."
    echo "üåê Frontend startar p√•: http://localhost:8081"
    echo ""
    npm run dev
}

# Hantera kommandoradsargument
case "${1:-both}" in
    "backend")
        start_backend
        ;;
    "frontend")
        start_frontend
        ;;
    "both"|"")
        echo "üöÄ Startar b√•da servrarna..."
        echo "üõë Tryck Ctrl+C f√∂r att stoppa b√•da"
        echo ""
        
        # Starta backend i bakgrunden
        start_backend &
        BACKEND_PID=$!
        
        # V√§nta lite f√∂r backend att starta
        sleep 3
        
        # Kontrollera att backend startade
        if curl -s http://localhost:5000/api/status > /dev/null 2>&1; then
            echo "‚úÖ Backend ig√•ng p√• port 5000"
        else
            echo "‚ö†Ô∏è Backend kanske inte startade korrekt"
        fi
        
        # Starta frontend
        start_frontend
        
        # Cleanup n√§r skriptet avslutas
        trap "echo 'üõë Stoppar servrar...'; kill $BACKEND_PID 2>/dev/null; exit" INT TERM
        ;;
    *)
        echo "‚ùì Anv√§ndning: $0 [backend|frontend|both]"
        echo ""
        echo "Exempel:"
        echo "  $0           # Startar b√•da (standard)"
        echo "  $0 backend   # Startar endast backend" 
        echo "  $0 frontend  # Startar endast frontend"
        exit 1
        ;;
esac