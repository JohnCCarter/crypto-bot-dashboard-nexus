#!/usr/bin/env python3
"""
üöÄ Snabb Test Runner
K√∂r tester med optimerade inst√§llningar f√∂r snabbare feedback.
"""

import os
import sys
import subprocess
import argparse
from pathlib import Path

# L√§gg till projektroten i Python-s√∂kv√§gen
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

def run_fast_tests():
    """K√∂r snabba tester f√∂rst."""
    print("üöÄ K√∂r snabba tester...")
    
    # S√§tt milj√∂variabler f√∂r snabbare testning
    env = os.environ.copy()
    env.update({
        "FASTAPI_DISABLE_WEBSOCKETS": "true",
        "FASTAPI_DISABLE_GLOBAL_NONCE_MANAGER": "true", 
        "FASTAPI_DEV_MODE": "true",
        "PYTHONPATH": str(project_root)
    })
    
    # K√∂r unit-tester f√∂rst (snabbast)
    cmd = [
        sys.executable, "-m", "pytest",
        "backend/tests/",
        "-m", "unit or fast",
        "-v",
        "--tb=short",
        "--maxfail=10",
        "--durations=10"
    ]
    
    result = subprocess.run(cmd, env=env, cwd=project_root)
    return result.returncode

def run_mock_tests():
    """K√∂r mock-tester."""
    print("üé≠ K√∂r mock-tester...")
    
    env = os.environ.copy()
    env.update({
        "FASTAPI_DISABLE_WEBSOCKETS": "true",
        "FASTAPI_DISABLE_GLOBAL_NONCE_MANAGER": "true",
        "FASTAPI_DEV_MODE": "true",
        "PYTHONPATH": str(project_root)
    })
    
    cmd = [
        sys.executable, "-m", "pytest",
        "backend/tests/",
        "-m", "mock",
        "-v",
        "--tb=short",
        "--maxfail=10"
    ]
    
    result = subprocess.run(cmd, env=env, cwd=project_root)
    return result.returncode

def run_api_tests():
    """K√∂r API-tester."""
    print("üåê K√∂r API-tester...")
    
    env = os.environ.copy()
    env.update({
        "FASTAPI_DISABLE_WEBSOCKETS": "true",
        "FASTAPI_DISABLE_GLOBAL_NONCE_MANAGER": "true",
        "FASTAPI_DEV_MODE": "true",
        "PYTHONPATH": str(project_root)
    })
    
    cmd = [
        sys.executable, "-m", "pytest",
        "backend/tests/",
        "-m", "api",
        "-v",
        "--tb=short",
        "--maxfail=10"
    ]
    
    result = subprocess.run(cmd, env=env, cwd=project_root)
    return result.returncode

def run_slow_tests():
    """K√∂r l√•ngsamma tester sist."""
    print("üêå K√∂r l√•ngsamma tester...")
    
    env = os.environ.copy()
    env.update({
        "PYTHONPATH": str(project_root)
    })
    
    cmd = [
        sys.executable, "-m", "pytest",
        "backend/tests/",
        "-m", "slow or integration or e2e",
        "-v",
        "--tb=short",
        "--maxfail=5"
    ]
    
    result = subprocess.run(cmd, env=env, cwd=project_root)
    return result.returncode

def main():
    parser = argparse.ArgumentParser(description="Snabb test runner")
    parser.add_argument("--fast-only", action="store_true", help="K√∂r bara snabba tester")
    parser.add_argument("--mock-only", action="store_true", help="K√∂r bara mock-tester")
    parser.add_argument("--api-only", action="store_true", help="K√∂r bara API-tester")
    parser.add_argument("--slow-only", action="store_true", help="K√∂r bara l√•ngsamma tester")
    
    args = parser.parse_args()
    
    if args.fast_only:
        return run_fast_tests()
    elif args.mock_only:
        return run_mock_tests()
    elif args.api_only:
        return run_api_tests()
    elif args.slow_only:
        return run_slow_tests()
    else:
        # K√∂r alla tester i optimerad ordning
        print("üöÄ Snabb Test Runner - K√∂r alla tester i optimerad ordning")
        
        # 1. Snabba tester f√∂rst
        if run_fast_tests() != 0:
            print("‚ùå Snabba tester misslyckades")
            return 1
            
        # 2. Mock-tester
        if run_mock_tests() != 0:
            print("‚ùå Mock-tester misslyckades")
            return 1
            
        # 3. API-tester
        if run_api_tests() != 0:
            print("‚ùå API-tester misslyckades")
            return 1
            
        # 4. L√•ngsamma tester sist
        if run_slow_tests() != 0:
            print("‚ùå L√•ngsamma tester misslyckades")
            return 1
            
        print("‚úÖ Alla tester klara!")
        return 0

if __name__ == "__main__":
    sys.exit(main()) 